{"version":3,"sources":["api/constants/constants.ts","api/utils/getData.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","index.tsx","App.tsx","api/utils/getTodos.ts","api/utils/getUsers.ts"],"names":["API_URL","getData","url","fetch","then","response","json","Todo","todo","id","title","completed","user","name","TodoList","todos","className","map","key","ReactDOM","render","useState","isLoading","setIsLoadindg","preparedTodos","setPreparedTodos","typeOfSort","setTypeOfSort","handleLoadButton","a","users","find","userId","addUserForTodos","length","type","disabled","onClick","sort","b","localeCompare","todoA","todoB","Number","handleTypeOfSort","document","getElementById"],"mappings":"6PAAaA,G,MAAU,wCCAVC,EAAU,SAAIC,GAAJ,OAAgCC,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCM/EC,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE9BC,EAIED,EAJFC,GACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAC,EACEJ,EADFI,KAGF,OACE,4BACE,4BAAKH,GACL,mCAAKG,QAAL,IAAKA,OAAL,EAAKA,EAAMC,MACX,4BAAKH,GACL,4BAAKC,EAAY,WAAa,YCZvBG,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjC,2BAAOC,UAAU,SACf,+BACE,4BACE,kCACA,oCACA,oCACA,wCAGJ,+BACGD,EAAME,KAAI,SAAAT,GAAI,OACb,kBAAC,EAAD,CAAMU,IAAKV,EAAKC,GAAID,KAAMA,UCflCW,IAASC,OACP,mBCCqB,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACpBC,EADoB,KACTC,EADS,OAEeF,mBAAyB,IAFxC,mBAEpBG,EAFoB,KAELC,EAFK,OAGSJ,mBAAS,IAHlB,mBAGpBK,EAHoB,KAGRC,EAHQ,KAKrBC,EAAgB,uCAAG,8BAAAC,EAAA,6DACvBN,GAAc,GADS,SCRoBtB,EAAO,UAAYD,EAAZ,WDQ3B,cAEjBe,EAFiB,gBERoBd,EAAO,UAAYD,EAAZ,WFQ3B,OAGjB8B,EAHiB,OAUvBL,EALwB,kBAAMV,EAAME,KAAI,SAAAT,GAAI,sBACvCA,EADuC,CAE1CI,KAAMkB,EAAMC,MAAK,SAAAnB,GAAI,OAAIA,EAAKH,KAAOD,EAAKwB,eAG3BC,IAVM,2CAAH,qDA2BtB,OACE,oCACE,qDAC0B,IAAzBT,EAAcU,OAEX,4BACEC,KAAK,SACLC,SAAUd,EACVe,QAAST,EACTZ,UAAU,UAETM,EAAa,kDAAmB,mDAInC,oCACE,4BACEN,UAAU,SACVmB,KAAK,SACLE,QAAS,kBAAMV,EAAc,WAH/B,iBAOA,4BACEX,UAAU,SACVmB,KAAK,SACLE,QAAS,kBAAMV,EAAc,eAH/B,kBAOA,4BACEX,UAAU,SACVmB,KAAK,SACLE,QAAS,kBAAMV,EAAc,UAH/B,gBAOA,kBAAC,EAAD,CAAUZ,MAnDK,WACvB,OAAQW,GACN,IAAK,QACH,OAAO,YAAIF,GAAec,MAAK,SAACT,EAAGU,GAAJ,OAAUV,EAAEnB,MAAM8B,cAAcD,EAAE7B,UACnE,IAAK,YACH,OAAO,YAAIc,GACRc,MAAK,SAACG,EAAOC,GAAR,OAAmBC,OAAOD,EAAM/B,WAAagC,OAAOF,EAAM9B,cACpE,IAAK,OACH,OAAO,YAAIa,GAAec,MAAK,SAACT,EAAGU,GAAJ,OAAUV,EAAEjB,KAAKC,KAAK2B,cAAcD,EAAE3B,KAAKC,SAC5E,QACE,OAAOW,GAyCcoB,SDtE3B,MACAC,SAASC,eAAe,U","file":"static/js/main.e52434d8.chunk.js","sourcesContent":["export const API_URL = 'https://jsonplaceholder.typicode.com';\n","export const getData = <T>(url: string): Promise<T> => fetch(url).then(response => response.json());\n","import React, { FC } from 'react';\n\ninterface Props {\n  todo: PreparedTodo;\n}\n\nexport const Todo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <tr>\n      <th>{id}</th>\n      <th>{user?.name}</th>\n      <th>{title}</th>\n      <th>{completed ? 'complete' : 'active'}</th>\n    </tr>\n  );\n};\n","import React, { FC } from 'react';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  todos: PreparedTodo[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th>ID</th>\n        <th>User</th>\n        <th>Task</th>\n        <th>Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => (\n        <Todo key={todo.id} todo={todo} />\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React, { useState, FC } from 'react';\nimport './App.css';\nimport { getTodos } from './api/utils/getTodos';\nimport { getUsers } from './api/utils/getUsers';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport const App: FC = () => {\n  const [isLoading, setIsLoadindg] = useState(false);\n  const [preparedTodos, setPreparedTodos] = useState<PreparedTodo[]>([]);\n  const [typeOfSort, setTypeOfSort] = useState('');\n\n  const handleLoadButton = async () => {\n    setIsLoadindg(true);\n    const todos = await getTodos();\n    const users = await getUsers();\n\n    const addUserForTodos = () => todos.map(todo => ({\n      ...todo,\n      user: users.find(user => user.id === todo.userId) as User,\n    }));\n\n    setPreparedTodos(addUserForTodos());\n  };\n\n  const handleTypeOfSort = () => {\n    switch (typeOfSort) {\n      case 'title':\n        return [...preparedTodos].sort((a, b) => a.title.localeCompare(b.title));\n      case 'completed':\n        return [...preparedTodos]\n          .sort((todoA, todoB) => (Number(todoB.completed) - Number(todoA.completed)));\n      case 'user':\n        return [...preparedTodos].sort((a, b) => a.user.name.localeCompare(b.user.name));\n      default:\n        return preparedTodos;\n    }\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {preparedTodos.length === 0\n        ? (\n          <button\n            type=\"button\"\n            disabled={isLoading}\n            onClick={handleLoadButton}\n            className=\"button\"\n          >\n            {isLoading ? (<>Loading...</>) : <>Load Todos</>}\n          </button>\n        )\n        : (\n          <>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setTypeOfSort('title')}\n            >\n              sort by title\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setTypeOfSort('completed')}\n            >\n              sort by status\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setTypeOfSort('user')}\n            >\n              by user name\n            </button>\n            <TodoList todos={handleTypeOfSort()} />\n          </>\n        )}\n    </>\n  );\n};\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getTodos = (): Promise<Todo[]> => getData<Todo[]>(`${API_URL}/todos`);\n","import { API_URL } from '../constants/constants';\nimport { getData } from './getData';\n\nexport const getUsers = (): Promise<User[]> => getData<User[]>(`${API_URL}/users`);\n"],"sourceRoot":""}